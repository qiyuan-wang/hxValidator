{"name":"HxValidator","tagline":"A lightweight, easily scalable JavaScript form validation library","body":"Just write the requirements on DOM data- attributes, **hx-Validator** would handle the validation stuff.\r\n\r\nAnd it's pure js.\r\n\r\n## Features\r\n\r\n* Pure javacript, no more libraries for dependency.\r\n* Easy to use, only data- attributes and one line js.\r\n* Easy to customize, you can change those classes names and styles * at your ease.\r\n* Easy to extend, you can write your own validating function for special inputs easily.\r\n* Supports validating inputs value with:\r\n    - required\r\n    - max-length\r\n    - min-length\r\n    - phone format\r\n    - email format\r\n    - not-all-number format\r\n    - matching another input value(password confirmation, for example)\r\n    - **your own validating format**\r\n    \r\n* Current version only supports text or password type of inputs, and will support checkbox in next few versions.\r\n\r\n## Browser Compatibility\r\n\r\nTested in the following browsers/versions:\r\n\r\n* Google Chrome 27+\r\n* Internet Explorer 9.0+ (Sorry, IE8)\r\n* Firefox 30+\r\n* Safari 5.1+\r\n\r\nDon't have much time and conditions on Compatibility test, and let me know if you got any information about this.\r\n\r\n\r\n## Documentation\r\n\r\n### Quick Start\r\n\r\nSo, let's write a register form for your brand-new, coolest website.\r\n\r\nFirst, insert hx-Validator in your HTML:\r\n\r\n    <script type=\"text/javascript\" src=\"/your/path/to/hx-validator.js\"></scirpt>\r\n    <!---- and you could wrap hxValidator default css in -->\r\n    <link rel=\"stylesheet\" href=\"/your/path/to/hxValidator/style.css\"></link>\r\n\r\nOkay, a account need a username, a password and a confirmation for the password. We would give them some requirements: **min-length**, **max-length**, **required**, and **confirmation must equal** blah blah.\r\n\r\n    <form id=\"hxValidator\">\r\n      <fieldset>\r\n        <div class=\"hxValidator-field\">\r\n          <input name=\"username\" type=\"text\" data-required=\"true\" data-min-length=\"3\" data-max-length=\"8\" value='' placeholder=\"Username\" />\r\n          <span class=\"errors error-txt\"></span>\r\n        </div>\r\n        <div class=\"hxValidator-field\">\r\n          <input name=\"password\" type=\"password\" data-required=\"true\" data-min-length=\"6\" data-max-length=\"10\"  placeholder=\"Password\" />\r\n          <span class=\"errors error-txt\"></span>\r\n        </div>\r\n        <div class=\"hxValidator-field\">\r\n          <input name=\"comfirm_password\" type=\"password\" data-required=\"true\" data-match=\"password|\" placeholder=\"Confirmation\" />\r\n          <span class=\"errors error-txt\"></span>\r\n        </div>\r\n        <div>\r\n          <input name=\"submit\" type=\"submit\" value='Submit' />\r\n        </div>\r\n      </fieldset>\r\n    </form>\r\n\r\nWhat have we done? We just:\r\n\r\n1. **wrap every inputs in a div with class \"hxValidator-field\"**\r\n2. **insert a \"error-txt\" span tag**\r\n3. **write all requirements in data- attributes**.\r\n\r\nDoes it work? Give it a try. Tell hxValidator which form you want to validate by Id:\r\n\r\n    <script> var formValidate = new hxValidator('hxValidator'); </script>\r\n\r\n([You can try this little demo here.][demo1])  \r\n\r\n\r\nSo, I'll reveal the result: It works! An error message would be inserted into the \"error-txt\" span tag if your inputs doesn't meet the requirements of the field.\r\n\r\n### An advanced example\r\n\r\nPrevious example maybe too simple, right? Let's have a complicated one!\r\n\r\nYou may need a label for the field, a hint to explain the requirements, and icons to indicate whether pass or fail.\r\n\r\nThe snippet of code below shows a field meets all those needs:\r\n\r\n     <div class=\"hxValidator-field\">\r\n       <label for=\"username\"><i class=\"icon-gl2 icon-white-user\" title=\"Username\"></i></label>\r\n       <input name=\"username\" type=\"text\" data-min-length=\"3\" data-max-length=\"10\" data-required=\"true\" data-username-unique-remote=\"true\"  value='' placeholder=\"Username\" />\r\n       <span class='hints'>3-10 characters, numbers and underscores.</span>\r\n       <i class=\"icon-gl2 icon\"></i>\r\n       <span class=\"errors error-txt\"></span>\r\n     </div>\r\n\r\nYou would notice there is a bizzare requirement, `data-username-unique-remote`. Yeah, it is a custom validating format. And it checks whether the username you inputs has registered yet. Following code shows the secret:\r\n\r\n    <script>\r\n      function remoteCheckFunc(field) {\r\n        // check username uniqueness\r\n        // with backend server\r\n        ...\r\n      }\r\n      \r\n      var options = {\r\n        messages: {\r\n          usernameUniqueRemote: \"The username is unavailiable.\"\r\n        },\r\n        customCheckMethods: {\r\n          usernameUniqueRemote: remoteCheckFunc\r\n        }\r\n      }\r\n    \r\n      var formValidate = new hxValidator('hxValidator', options);\r\n    </script>\r\n    \r\nThe custom validating format needs an error message and a check function. `options` gives all the information.\r\n\r\nThat'all, no magic.\r\n\r\n([You can try this more complicated demo here.][demo2])  \r\n\r\n\r\n## Options\r\n\r\nAll those below you can customize.\r\n\r\n### **wrapperClass**\r\n\r\n`default: \"hxValidator-field\"`\r\n\r\nWrapper tag's class.\r\n\r\n### **errorsClass**\r\n\r\n`default: \"errors\"`\r\n\r\nErrors tag's class.\r\n\r\n### **hintsClass**\r\n\r\n`default: \"errors\"`\r\n\r\nHints tag's class.\r\n\r\n### **messages**\r\n\r\n`default:`\r\n    \r\n      messages: {\r\n        required: \"此项为必填项\",\r\n        minLength: \"此项要求最少%s个字符长度\",\r\n        maxLength: \"此项要求最多%s个字符长度\",\r\n        phone: \"手机格式错误\",\r\n        email: \"邮件格式错误\",\r\n        number: \"此项只能输入数字\",\r\n        notAllNumber: \"此项不能全为数字\",\r\n        match: \"与%s输入不一致\"\r\n      }\r\n\r\nError messages.\r\n\r\n### **errorCallback**\r\n\r\n`default: null`\r\n\r\nYou can define a callback function which would be called when a field failed the validation. \r\n\r\n**The function should have a paramter `field`, which is the field's DOM.**\r\n\r\n### **successCallback**\r\n\r\n`default: null`\r\n\r\nYou can define a callback function which would be called when a field passed the validation.\r\n\r\n**The function should have a paramter `field`, which is the field's DOM.**\r\n\r\n### **focusCallback** \r\n\r\n`default: null`\r\n\r\nYou can define a callback function which would be called when a field got focused.\r\n\r\n**The function should have a paramter `field`, which is the field's DOM.**\r\n\r\n\r\n## Changelog\r\n\r\n## Todo\r\n\r\n\r\n## License\r\n \r\n Copyright (c) 2014 zisasign. Licensed under the MIT license.\r\n \r\n [demo1]: http://\r\n [demo2]: http://\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}