{"name":"HxValidator","tagline":"A lightweight, easily scalable JavaScript form validation library","body":"# hx-validator.js\r\n\r\nJust write the requirements on DOM data- attributes, **hx-Validator** would handle the validation stuff.\r\n\r\nAnd it's pure JS.\r\n\r\n## Features\r\n\r\n* Pure javascript, no more libraries for dependency.\r\n* Easy to use, only data- attributes and one line js.\r\n* Easy to customize, you can change those classes names and styles at your ease.\r\n* Easy to extend, you can write your own validating function for special inputs easily.\r\n\r\n## Browser Compatibility\r\n\r\nTested in the following browsers/versions:\r\n\r\n* Google Chrome 27+\r\n* Internet Explorer 9.0+ (Sorry, IE8)\r\n* Firefox 30+\r\n* Safari 5.1+\r\n\r\nDon't have much time and conditions on Compatibility test, and let me know if you got any information about this.\r\n\r\n\r\n## Documentation\r\n\r\n### Markup\r\n\r\n    <!---- embed hxValidator -->\r\n    <script type=\"text/javascript\" src=\"/your/path/to/hx-validator.js\"></scirpt>\r\n    \r\n    <form id=\"hxValidator\">\r\n      <!---- a input field wrap -->\r\n      <div class=\"hxValidator-field\">\r\n        <input name=\"username\" type=\"text\" value='' placeholder=\"Username\" data-your-requirements /><!---- write requirements here -->\r\n        <span class='hints'>write hints text here </span>\r\n        <span class=\"errors error-txt\"></span><!---- erorr messages tag, leave it empty -->\r\n      </div>\r\n      <input name=\"submit\" type=\"submit\" value='Submit' />\r\n    </form>\r\n\r\nBasicly, an input field should have those things below:\r\n\r\n\r\n1. A div tag with '.hxvalidator-field';\r\n2. An input tag, with data- attibutes of requirements;\r\n3. An hints tag, and your hints for the field, you can leave it empty;\r\n4. An errors tags, leave it empty, error messages would be written in options.\r\n\r\nThat's all. \r\n\r\nAnd you can add other tags you like, like this [example] [demo].\r\n\r\n### Support validate requirements:\r\n\r\n#### required\r\n\r\nformat: `data-required=\"true\"`\r\n\r\nerror message: `This field is required`\r\n\r\n#### min-length\r\n\r\nformat: `data-min-length=\"{number required}\"`\r\n\r\nerror message: `This field needs %s characters at least`\r\n\r\nThe `%s` would be replace with the `number required` you set when the error message shows.\r\n\r\n#### max-length\r\n\r\nformat: `data-max-length=\"{number required}\"`\r\n\r\nerror message: `This field needs %s characters at most`\r\n\r\nThe `%s` would be replace with the `number required` you set when the error message shows.\r\n\r\n#### phone\r\n\r\nformat: `data-phone=\"true\"`\r\n\r\nerror message: `Not a valid phone number`\r\n\r\nYou should change the `phoneRegex` for your local phone format from src. The default is Chinese phone format.\r\n\r\n#### number\r\n\r\nformat: `data-number=\"true\"`\r\n\r\nerror message: `Numbers only`\r\n\r\n#### not all number\r\n\r\nformat: `data-not-all-number=\"true\"`\r\n\r\nerror message: `Can't be all numbers`\r\n\r\n#### match\r\n\r\nformat: `data-match=\"{name attribute}|\"`\r\n\r\nerror message: `Does not match the %s field`\r\n\r\nThe `%s` would be replace with the target input field `name attribute` you set when the error message shows.\r\n\r\nAnd the last `|` is required and you could add a `alias` for the target field after the `|`.\r\n\r\nThis validation is useful as password confirmation. For example,\r\n\r\n    <div class=\"hxValidator-field\">\r\n      <input name=\"password\" type=\"password\" data-max-length=\"12\" data-min-length=\"6\" id=\"password\" />\r\n      <span class='hints'></span>\r\n      <span class=\"errors error-txt\"></span>\r\n    </div>\r\n    <div class=\"hxValidator-field\">\r\n      <input name=\"comfirm_password\" type=\"password\" data-match=\"password|密码\" id=\"comfirm_password\" />\r\n      <span class='hints'></span>\r\n      <span class=\"errors error-txt\"></span>\r\n    </div>\r\n\r\n#### custom validation\r\n\r\nYou can easily extend hxValidator to a special requirment on your own.\r\n\r\nYou have to supply 3 elements:\r\n\r\n1. A name for the validation；\r\n2. A validate function with a 'field' parameter, and a option parameter for data- attribute's value;\r\n3. A error message for this validation;\r\n\r\nThe validaton name should follow **lowerCamelCase format in JS**, and **lowercased joint with '-' in HTML**.\r\n\r\nThe `field` is the field's DOM and you can get the value of user inputs by calling `field.value`.\r\n\r\nAnd the validate function should return `true` when the value meets the  requirement, `false` for failed.\r\n\r\nThat' all. Wrap those into the `options` passed to hxValidator.\r\n\r\nLet's see a example:\r\n    \r\n    // You can not use those names as username\r\n    var forbiddenNames = \"admin Daisy\" // Yeah, I don't like Daisy!\r\n    \r\n    // optional is the value of the data- attribute\r\n    var forbiddenNameValidate = function (field, optional) {\r\n        var inputValue = field.value;\r\n        return (forbiddenNames.indexOf(inputValue) < 0);\r\n    }\r\n    \r\n    var options = {\r\n        messages: {forbiddenUsername: \"This username is not allowed\"},\r\n        customCheckMethods: {\r\n            forbiddenUsername: forbiddenNameValidate\r\n        }\r\n    }\r\n    \r\n    // init the validator\r\n    new hxValidator(\"#register_form\", options);\r\n    \r\n    // HTML\r\n    <div class=\"hxValidator-field\">\r\n      <input name=\"username\" type=\"text\" data-forbidden-username=\"true\" id=\"username\" />\r\n      <span class='hints'></span>\r\n      <span class=\"errors error-txt\"></span>\r\n    </div>\r\n\r\nThis gives you flexibility at most. You could even write **Remote check** with your backend server for some special field.\r\n\r\nCheck [this example][demo2] Which check the uniqueness of username, email, and even a validation code. \r\n\r\n**P.S.:**    \r\nCurrent version only supports text or password type of inputs, and will support checkbox in next few versions.\r\n\r\n\r\n### Options\r\n\r\nAll those below you can customize.\r\n\r\n#### wrapperClass\r\n\r\n`default: \".hxValidator-field\"`\r\n\r\nWrapper tag's class.\r\n\r\n#### **errorsClass**\r\n\r\n`default: \".errors\"`\r\n\r\nErrors tag's class.\r\n\r\n#### **hintsClass**\r\n\r\n`default: \".hints\"`\r\n\r\nHints tag's class.\r\n\r\n#### **messages**\r\n\r\n`default:`\r\n    \r\n      messages: {\r\n        required: \"This field is required\",\r\n        minLength: \"This field needs %s characters at least\",\r\n        maxLength: \"This field needs %s characters at most\",\r\n        phone: \"Not a valid phone number\",\r\n        email: \"Not a valid Email address\",\r\n        number: \"Numbers only\",\r\n        notAllNumber: \"Can't be all numbers\",\r\n        match: \"Does not match the %s field\"\r\n      }\r\n\r\nError messages.\r\n\r\n#### **errorCallback**\r\n\r\n`default: null`\r\n\r\nYou can define a callback function which would be called when a field failed the validation. \r\n\r\n**The function should have a paramter `field`, which is the field's DOM.**\r\n\r\n#### **successCallback**\r\n\r\n`default: null`\r\n\r\nYou can define a callback function which would be called when a field passed the validation.\r\n\r\n**The function should have a paramter `field`, which is the field's DOM.**\r\n\r\n#### **focusCallback** \r\n\r\n`default: null`\r\n\r\nYou can define a callback function which would be called when a field got focused.\r\n\r\n**The function should have a paramter `field`, which is the field's DOM.**\r\n\r\nCheck [this example][demo2] Which use all thoese callbacks for styling with pass/failed icons. \r\n\r\n\r\n## Changelog\r\n\r\n- 0.1.0 release\r\n- 0.0.10 add readme\r\n- 0.0.9 rewrite with pure js\r\n- 0.0.5 delay Remote validation check\r\n- 0.0.2 add examples.html\r\n\r\n## Todo\r\n\r\n- add supports for checkbox and select\r\n- add localization\r\n- reorganize structure of options \r\n\r\n## One more thing\r\n\r\nhxValidator.js was written in jQuery at first, but then rewrote in pure JS.\r\n\r\nI kept the jQuery version file in the dist folder(but won't keep maintenance), use at your ease.\r\n\r\n\r\n## License\r\n \r\n Copyright (c) 2014 zisasign. Licensed under the MIT license.\r\n \r\n [demo]: http://qiyuan-wang.github.io/hxValidator/\r\n [demo2]: http://www.huxiu.com/user/register.html","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}